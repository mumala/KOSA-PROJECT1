[[MJ 논문 분석]]

1. 한글의 구조 (IMF) : 한글 한글자는 Initial, Medial, Final 로 나뉜다. (자음, 모음, 받침)
2. Initial은 왼쪽 혹은 위에 배치된다.
3. Medial은 오른쪽 위에 배치된다.
4. Final은 아래배치된다.
5. Inital은 2가지 종류로 나뉜다.
   (single, double)
   (가    , 까    )
6. Medial은 5가지 종류로 나뉜다.
    (below, right-single, right-double, below-right-single, below-right-double)
    (꼬    , 가          , 웨           , 곡                   , 곿                    )
7. Final은 3가지로 나뉜다.
   (no final character, single, dobule)
   (고                  , 곡    , 곲     )
8. Atomic glyph (원자적 자체) : 최소단위의 기본문자, 회전시켜서 다른 문자를 만들수 있음

++ 논문 정리 추가

- 개별 한글 문자는 블록으로 결합
  → initial, medial, final 으로 나누어지며, 독립적인 생성 변수를 가짐
  → 딥 네트워크(딥러닝)을 학습할 수 있는 원자 자체(글자체) 및 기하학적 구조의 계층으로 구성
  → 11,172개의 한글 문자 블록으로 나눌 수 있음

- 한글 문자를 블록 내용에 따른 변환, 크기조정, 스타일 변형, 글꼴 전체의 변형으로 인코딩하여 학습

- 글꼴 이미지 생성 및 표준화
  → 유니코드 값을 사용하여 11,172개의 한글 블록에 대한 텍스트 파일을 만들고 이미지 파일로 변환
  → 이미지는 블록 전체의 최대 이미지 크기로 조정
  → 글꼴 크기는 중간 크기로 조정, initial, medial, final 문자에 대한 개별 이미지가 글꼴에 포함
  → 포함되지 않은 글꼴의 경우, 직접 글꼴을 잘라 다른 글꼴에서 결정된 위치와 크기로 빈 이미지에 삽입
  
** 논문에서는 네이버 폰트에 있는 35개의 폰트를 사용, 7-fold 교차검증 모형 사용, 활성화함수는 ReLU 사용
** 딥러닝 모형은 RNN, Pytorch 이용



[[이한슬 메모]]

# 텍스트를 이미지로 만들어서 훈련 데이터로 사용하기 위한 목적
from PIL import Image,ImageDraw,ImageFont
 
# 이미지로 출력할 글자 및 폰트 지정 (나눔고딕 트루타입폰트 파일)
draw_text = '가'
font = ImageFont.truetype("./NanumGothic.ttf", 25)
 
# 이미지 사이즈 지정
text_width = 28
text_height = 28
 
# 이미지 객체 생성 (배경 검정)
canvas = Image.new('RGB', (text_width, text_height), "black")
 
# 가운데에 그리기 (폰트 색: 하양)
draw = ImageDraw.Draw(canvas)
w, h = font.getsize(draw_text)
draw.text(((text_width-w)/2.0,(text_height-h)/2.0), draw_text, 'white', font)
 
# 가.png로 저장 및 출력해서 보기
canvas.save(draw_text+'.png', "PNG")
canvas.show()
[출처] [OCR] python으로 폰트 파일을 지정하여 png파일로 글자 출력하기 (python text font to image)|작성자 로봇매냐



[[김지원 html]]
<html>

<head>

<meta charset="UTF-8">

<title>:: JavaScript 캔버스 이미지 업로드 ::</title>

<meta name="viewport" content="width=device-width">

<link type="text/css" rel="stylesheet" href="./css/modern.css"/>

<link type="text/css" rel="stylesheet" href="http://jcrop-cdn.tapmodo.com/v0.9.12/css/jquery.Jcrop.min.css"/>

<style type="text/css">

    .imgArea { text-align:center; }

    canvas, #uploadFile, #editBtn, #cutBtn { display:none; }

    body { overflow:hidden };

</style>

<script type="text/javascript" src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

<script type="text/javascript" src="http://jcrop-cdn.tapmodo.com/v0.9.12/js/jquery.Jcrop.min.js"></script>

<script type="text/javascript">

   

    let jcropApi = null;



    // @breif 이미지 크롭 영역지정 UI 나타내기

    function imgCropDesignate() {



        let editWidth = jQuery("#editImg").width();

        let editHeight = jQuery("#editImg").height();

       

        // @breif jcrop 실행시 크롭영역을 미리 세팅

        let x1 = window.screen.width / 2 - editWidth;

        let y1 = window.screen.height / 2 - editHeight;

        let x2 = editWidth / 1.5;

        let y2 = editHeight / 1.5;



        // @breif jcrop 실행

        jQuery("#editImg").Jcrop({

              bgFade : true

            , bgOpacity : .2

            , setSelect : [ x1, y1, x2, y2 ]

            , onSelect : updateCoords

        }, function() {

            jcropApi = this;

        });

        

        jQuery("#editBtn").css("display", "none");

        jQuery("#cutBtn").css("display", "inline");

    }

    

    // @breif 지정된 크롭 한 영역( 좌표, 넓이, 높이 )의 값을 보관하는 함수

    function updateCoords(crap) {

        jQuery("#xAxis").val(crap.x);

        jQuery("#yAxis").val(crap.y);

        jQuery("#wLength").val(crap.w);

        jQuery("#hLength").val(crap.h);

    }



    // @breif 크롭한 영역 잘라내고 추출하기

    function imgCropApply() {



        if(parseInt(jQuery("#wLength").val()) == "NaN") {

            alert("이미지를 크롭한 이후\n자르기 버튼을 클릭하세요.");

            return false;

        } else {



            let editImage = new Image();

            editImage.src = jQuery("#editImg").attr("src");



            editImage.onload = function() {



                // @breif 캔버스 위에 이미지 그리기

                let canvas = document.querySelector("canvas");

                let canvasContext = canvas.getContext("2d");



                // @breif 캔버스 크기를 이미지 크기와 동일하게 지정

                canvas.width = jQuery("#wLength").val();

                canvas.height = jQuery("#hLength").val();

                                

                canvasContext.drawImage(

                      this

                    , jQuery("#xAxis").val()        // 자르기를 시작할 x좌표

                    , jQuery("#yAxis").val()        // 자르기를 시작할 y좌표

                    , jQuery("#wLength").val()    // 잘라낸 이미지의 넓이

                    , jQuery("#hLength").val()    // 잘라낸 이미지의 높이

                    , 0                                         // 캔버스에 이미지를 배치할 x좌표

                    , 0                                         // 캔버스에 이미지를 배치할 y좌표

                    , jQuery("#wLength").val()    // 사용할 이미지의 넓이(이미지 스트레칭 또는 축소)

                    , jQuery("#hLength").val()    // 사용할 이미지의 높이(이미지 스트레칭 또는 축소)

                );



                // @breif 편집한 캔버스의 이미지를 화면에 출력한다.

                let dataURI = canvas.toDataURL("image/jpeg");

                jQuery("#editImg").attr("src", dataURI);

                

                // @breif 이미지의 크기는 자른 이미지와 동일하게 지정

                jQuery("#editImg").css("width", jQuery("#wLength").val());

                jQuery("#editImg").css("height", jQuery("#hLength").val());

            };



            jQuery("#cutBtn").css("display", "none");



            // @details JCROP을 종료한다.

            jcropApi.destroy();

       jcropApi = null;

        }

    }

   

    // @breif 이미지 업로드 함수

    function uploadImgFilePrinted() {



        // @details 업로드 파일 정보를 받아온다.

        let fileInfo = document.getElementById("uploadFile").files[0];

        let reader = new FileReader();



        reader.onload = function() {



            // @details 업로드 이미지 출력

            jQuery("#editImg").attr("src", reader.result);

            

            // @details 이미지 크기를 제목 영영과 같게 출력

            jQuery("#editImg").css("width", jQuery("h1").width());

            

            // @details 이미지 업로드 기능 제거, 추가 업로드 방지

            jQuery("#editImg").parent("a").removeAttr("onClick");

            

            // @details 편집버튼 노출

            jQuery("#editBtn").css("display", "inline");

            

            canvasDrawImage(function() {

               alert("이미지 업로드가 완료되었습니다.");

            });

        };



        if(fileInfo) {         

            // @details readAsDataURL을 통해 업로드한 파일의 URL을 읽어 들인다.

            reader.readAsDataURL(fileInfo);

        }

    }

   

    // @breif 캔버스 이미지 생성

    function canvasDrawImage(callback) {

      

        let prepImage = new Image();

        prepImage.src = jQuery("#editImg").attr("src");



        prepImage.onload = function() {



            // @details 캔버스 위에 이미지 그리기

            // jQuery("canvas") 와같은 명령은 사용할 수 없다.

            let canvas = document.querySelector("canvas");

            let canvasContext = canvas.getContext("2d");



            canvas.width = jQuery("#editImg").width();

            canvas.height = jQuery("#editImg").height();

            canvasContext.drawImage(this, 0, 0, jQuery("#editImg").width(), jQuery("#editImg").height());



            // @details 캔버스의 이미지

            let dataURI = canvas.toDataURL("image/jpeg");

            jQuery("#editImg").attr("src", dataURI);

            

            callback();

        };

    }

</script>

</head>

<body>

<input type="hidden" id="xAxis" value="0" placeholder="선택영여역의_x좌표"/>

<input type="hidden" id="yAxis" value="0" placeholder="선택영여역의_y좌표"/>

<input type="hidden" id="wLength" value="0" placeholder="선택영여역의_w넓이"/>

<input type="hidden" id="hLength" value="0" placeholder="선택영여역의_h높이"/>

<input type="file" id="uploadFile" onChange="uploadImgFilePrinted();" accept="image/*"/>

<div class="contents">

    <h1>이미지&nbsp;자르기<span>샘플</span></h1>

    <div class="imgArea">

        <a href="javascript:;" onClick="jQuery('#uploadFile').click();">

            <img id="editImg" src="./user-anonymous.png"/>

        </a>

        <br/><br/>

        <input id="editBtn" type="button" onClick="imgCropDesignate();" value="편집"/>

        <input id="cutBtn" type="button" onClick="imgCropApply();" value="자르기"/>

    </div>

    <canvas></canvas>

    <div class="copyright" style="bottom:0;">

    

    </div>

</div>

</body>

</html> 

